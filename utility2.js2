/* MODULE_BEGIN { "actionList": ["lint"], "file": "/admin/admin.html" } */
<!DOCTYPE html><html ng-app>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
<link href="/public/utility2/utility2_external.browser.rollup.min.css" rel="stylesheet"/>
</head>
<body>

  Write some text in textbox:
  <input type="text" ng-model="sometext" />
  <h1>Hello {{ sometext }}</h1>

<script src="/public/utility2/utility2_external.browser.rollup.min.js"></script>
<script src="/public/utility2.js"></script>
</body>
</html>
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": ".gitconfig" } */
[branch "master"]
  remote = origin
  merge = refs/heads/master
[branch "unstable"]
  remote = origin
  merge = refs/heads/unstable
[core]
  bare = false
  filemode = true
  ignorecase = true
  logallrefupdates = true
  repositoryformatversion = 0
[receive]
  denyCurrentBranch = warn
[remote "heroku"]
  fetch = +refs/heads/*:refs/remotes/heroku/*
  url = git@heroku.com:utility2-unstable.git
[remote "origin"]
  fetch = +refs/heads/*:refs/remotes/origin/*
  url = git@github.com:kaizhu256/utility2.git
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": ".gitignore" } */
*.bak
*.log
*.min.*
*.pid
*.swp
.DS_Store
._*
.build
.env
.git
.gitconfig
.gitignore
.hg
.install
.lock-wscript
.src
.svn
.vim
.wafpickle-*
CVS
README.*
artifacts
bower_components
node_modules
npm-debug.log
log
logs
public
secret.json
tmp
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": ".install/public/utility2_external.browser.css" } */
/*jslint browser: true, indent: 2, maxerr: 8, node: true, nomen: true, regexp: true, todo: true, unparam: true*/
/*global global, required, state, utility2, $*/
/* CSS_COMMENT
(function moduleInit() {
  'use strict';
  return {
    cache: true,
    cachePrefix: '/rollup',
    urlList: [
      //// bootstrap
      'https://raw.githubusercontent.com/twbs/bootstrap/master/dist/css/bootstrap.css',
      //// qunit
      'https://qunitjs.com/resources/qunit.css'
    ]
  };
}());
CSS_COMMENT */
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": ".install/public/utility2_external.browser.js" } */
/*jslint browser: true, indent: 2, maxerr: 8, node: true, nomen: true, regexp: true, todo: true, unparam: true*/
/*global global, required, state, utility2, $*/
(function moduleInit() {
  'use strict';
  if (typeof window === 'object') {
    window.global = window.global || window;
  }
  global.required = global.required || {};
  return {
    cache: true,
    cachePrefix: '/rollup',
    postProcessing: function (content) {
      return content
        /* mime.types */
        .replace(
          (/(\n\/\* MODULE_BEGIN .*\/mime.types \*\/\n)([\S\s]+?)(\n\/\* MODULE_END \*\/\n)/g),
          function (_, header, content, footer) {
            return header + '(function () { required.mime = { lookupDict: { /*'
              + content.replace((/^(\w\S+)\s+(\w.*)$/gm), function (_, value, keyList) {
                return '*/' + keyList.replace((/\S+/g), function (key) {
                  return '"' + key + '":"' + value + '",';
                }) + '/*';
              }) + '*/ } }; }());' + footer;
          }
        )
        /* nodejs */
        .replace(
          (/(\n\/\* MODULE_BEGIN https:\/\/raw\.githubusercontent\.com\/joyent\/node\/master\/lib\/(\w+)\.js \*\/\n[\S\s]+?\n\/\* MODULE_END \*\/\n)/g),
          '(function () { var module = {}, exports = module.exports = {},'
            + 'process = global.process || {};'
            + 'require = function (module) { return required[module] };'
            + '$1'
            + 'required.$2 = module.exports; }());'
        );
    },
    urlList: [
      /* jquery */
      'http://code.jquery.com/jquery.js',
      /* angularjs */
      'http://code.angularjs.org/snapshot/angular.js',
      /* bootstrap */
      'https://raw.githubusercontent.com/twbs/bootstrap/master/dist/js/bootstrap.js',
      /* mime.types */
      'http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types',
      /* nodejs */
      'https://raw.githubusercontent.com/joyent/node/master/lib/util.js',
      'https://raw.githubusercontent.com/joyent/node/master/lib/path.js',
      'https://raw.githubusercontent.com/joyent/node/master/lib/punycode.js',
      'https://raw.githubusercontent.com/joyent/node/master/lib/querystring.js',
      'https://raw.githubusercontent.com/joyent/node/master/lib/url.js',
      /* qunit */
      'https://qunitjs.com/resources/qunit.js'
    ]
  };
}());
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": ".install/public/utility2_external.shared.js" } */
/*jslint browser: true, indent: 2, maxerr: 8, node: true, nomen: true, regexp: true, todo: true, unparam: true*/
/*global global, required, state, utility2, $*/
(function moduleInit() {
  'use strict';
  if (typeof window === 'object') {
    window.global = window.global || window;
  }
  global.required = global.required || {};
  return {
    cache: true,
    cachePrefix: '/rollup',
    postProcessing: function (content) {
      return content
        /* colors */
        .replace(
          (/(\n\/\* MODULE_BEGIN .*\/colors\.js \*\/\n[\S\s]+?\n\/\* MODULE_END \*\/\n)/g),
          '(function () { var module = {}, exports = module.exports = {}; $1'
            + 'required.colors = exports;'
            + '}());'
        )
        /* connect logger */
        .replace(
          (/(\n\/\* MODULE_BEGIN .*\/expressjs\/morgan\/master\/index\.js \*\/\n[\S\s]+?\n\/\* MODULE_END \*\/\n)/g),
          '(function () { var module = {}, exports = module.exports = {};'
            + 'require = function (module) { return function (arg) { return arg; }; };'
            + '$1'
            + 'required.connect_logger = exports;'
            + '}());'
        )
        /* csslint */
        .replace(
          (/(\n\/\* MODULE_BEGIN .*\/csslint\.js \*\/\n[\S\s]+?\n\/\* MODULE_END \*\/\n)/g),
          '(function () { var module = {}, exports = module.exports = {}; $1'
            + 'required.csslint = CSSLint;'
            + '}());'
        )
        /* cssmin */
        .replace(
          (/(\n\/\* MODULE_BEGIN .*\/cssmin\.js \*\/\n[\S\s]+?\n\/\* MODULE_END \*\/\n)/g),
          '(function () { var module = {}, exports = module.exports = {}; $1'
            + 'required.cssmin = cssmin; }());'
        )
        /* jslint */
        .replace(
          (/(\n\/\* MODULE_BEGIN .*\/jslint\.js \*\/\n[\S\s]+?\n\/\* MODULE_END \*\/\n)/g),
          '(function () { var module = {}, exports = module.exports = {}; $1'
            + 'required.jslint = JSLINT; }());'
        )
        /* mime.types */
        .replace(
          (/(\n\/\* MODULE_BEGIN .*\/mime\.types \*\/\n)([\S\s]+?)(\n\/\* MODULE_END \*\/\n)/g),
          function (_, header, content, footer) {
            return header + '(function () { required.mime = { lookupDict: { /*'
              + content.replace((/^(\w\S+)\s+(\w.*)$/gm), function (_, value, keyList) {
                return '*/' + keyList.replace((/\S+/g), function (key) {
                  return '"' + key + '":"' + value + '",';
                }) + '/*';
              }) + '*/ } }; }());' + footer;
          }
        )
        /* nodejs */
        .replace(
          (/(\n\/\* MODULE_BEGIN https:\/\/raw\.githubusercontent\.com\/joyent\/node\/master\/lib\/(\w+)\.js \*\/\n[\S\s]+?\n\/\* MODULE_END \*\/\n)/g),
          '(function () { var module = {}, exports = module.exports = {},'
            + 'process = global.process || {};'
            + 'require = function (module) { return required[module] };'
            + '$1'
            + 'required.$2 = module.exports; }());'
        )
        /* uglify-js */
        .replace(
          (/(\n\/\* MODULE_BEGIN https:\/\/raw\.githubusercontent\.com\/mishoo\/UglifyJS2\/master\/lib\/utils\.js \*\/\n[\S\s]+\n\/\* MODULE_BEGIN https:\/\/raw\.githubusercontent\.com\/mishoo\/UglifyJS2\/master\/lib\/mozilla-ast\.js \*\/\n[\S\s]+?\n\/\* MODULE_END \*\/\n)/g),
          '(function () { var module = {}, exports = module.exports = {}; $1'
            + 'required.uglify_js = { parse: parse, Compressor: Compressor, OutputStream: OutputStream }; }());'
        );
    },
    urlList: [
      /* colors */
      'https://raw.githubusercontent.com/Marak/colors.js/master/colors.js',
      /* connect logger */
      'https://raw.githubusercontent.com/expressjs/morgan/master/index.js',
      /* csslint */
      'https://raw.githubusercontent.com/stubbornella/csslint/master/release/csslint.js',
      /* cssmin */
      'https://raw.githubusercontent.com/jbleuzen/node-cssmin/master/cssmin.js',
      /* jslint */
      'https://raw.githubusercontent.com/douglascrockford/JSLint/master/jslint.js',
      /* mime.types */
      'http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types',
      /* nodejs */
      'https://raw.githubusercontent.com/joyent/node/master/lib/util.js',
      'https://raw.githubusercontent.com/joyent/node/master/lib/path.js',
      'https://raw.githubusercontent.com/joyent/node/master/lib/punycode.js',
      'https://raw.githubusercontent.com/joyent/node/master/lib/querystring.js',
      'https://raw.githubusercontent.com/joyent/node/master/lib/url.js',
      /* uglifyjs */
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/utils.js',
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/ast.js',
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/parse.js',
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/transform.js',
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/scope.js',
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/output.js',
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/compress.js',
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/sourcemap.js',
      'https://raw.githubusercontent.com/mishoo/UglifyJS2/master/lib/mozilla-ast.js'
    ]
  };
}());
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": ".install/utility2_phantomjs.js" } */
/*jslint browser: true, indent: 2, maxerr: 8, node: true, nomen: true, regexp: true, todo: true, unparam: true*/
/*global global, phantom, required, state, utility2, $*/
/*jslint indent: 2, node: true, nomen: true*/
(function moduleInitPhantomjs() {
  /*
    this phantomjs module opens a webpage
  */
  'use strict';
  var local;
  local = {

    _init: function () {
      var page, state;
      /* phantomjs error handling - http://phantomjs.org/api/phantom/handler/on-error.html */
      phantom.onError = function (msg, trace) {
        var msgStack = ['PHANTOM ERROR: ' + msg];
        if (trace && trace.length) {
          msgStack.push('TRACE:');
          trace.forEach(function (t) {
            msgStack.push(' -> ' + (t.file || t.sourceURL) + ': ' + t.line
              + (t.function ? ' (in function ' + t.function + ')' : ''));
          });
        }
        console.error('\n\n\n\n' + msgStack.join('\n') + '\n');
        phantom.exit(1);
      };
      /* export global object */
      window.global = window.global || window;
      /* init state object */
      state = JSON.parse(global.atob(require('system').args[1]));
      /* set timeout for phantomjs */
      setTimeout(function () {
        if (state.modeOpenStatus !== 'success') {
          console.error('phantomjs - timeout', state.modeOpenStatus, state.url);
        }
        phantom.exit();
      }, Number(state.timeoutDefault) || 300000);
      page = require('webpage').create();
      /* page error handling - http://phantomjs.org/api/webpage/handler/on-error.html */
      page.onError = function (msg, trace) {
        var msgStack = ['ERROR: ' + msg];
        if (trace && trace.length) {
          msgStack.push('TRACE:');
          trace.forEach(function (t) {
            msgStack.push(' -> ' + t.file + ': ' + t.line
              + (t.function ? ' (in function "' + t.function + '")' : ''));
          });
        }
        console.error('\n\n\n\n' + msgStack.join('\n') + '\n');
      };
      /* pipe page's console.log to stdout */
      page.onConsoleMessage = function () {
        console.log.apply(console, arguments);
      };
      /* open requested webpage */
      page.open(state.url, function (status) {
        state.modeOpenStatus = status;
        console.log('phantomjs - opened', status, state.url);
      });
    }

  };
  local._init();
}());
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": "/main.html" } */
<!DOCTYPE html><html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
<link href="/public/utility2/utility2_external.browser.rollup.min.css" rel="stylesheet"/>
</head>
<body>
hello world
</body>
</html>
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": "/test/test.html" } */
<!DOCTYPE html><html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
<link href="/public/utility2/utility2_external.browser.rollup.min.css" rel="stylesheet"/>
</head>
<body>
hello world
<div id="qunit"></div>
<div id="qunit-fixture"></div>
<script>window.state = {{state}};</script>
<script src="/public/utility2/utility2_external.browser.rollup.min.js"></script>
<script src="/public/utility2.js"></script>
</body>
</html>
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint"], "file": "utility2.json" } */
{
  "url":"{{state.localhost}}/test/test.html#modeTest=1",
  "framework": "qunit",
  "max-duration": 300,
  "platforms": [
    ["Linux", "chrome","33"],
    ["Linux", "firefox","28"],
    ["OS X 10.9", "safari", "7"]
  ]
}
/* MODULE_END */



/* MODULE_BEGIN { "actionList": ["lint", "eval"], "file": "utility2.js2.js" } */
/*jslint browser: true, indent: 2, maxerr: 8, node: true, nomen: true, regexp: true, todo: true, unparam: true*/
/*global global, required, state, utility2, $*/
(function moduleInitJs2Nodejs() {
  /*
    this nodejs module finishes init of this js2 file
  */
  'use strict';
  var local;
  local = {

    _name: 'utility2.moduleInitJs2Nodejs',

    _init: function () {
      if (state.modeNodejs) {
        utility2.initModule(module, local);
      }
    },

    __init_nullCase_test: function (onEventError) {
      /*
        this function tests _init's null case handling behavior
      */
      utility2.testMock(onEventError, [
        [global, { state: {} }]
      ], function (onEventError) {
        local._init();
        onEventError();
      });
    },

    _initOnce: function () {
      /* indicate utility2.js2 is ready */
      utility2.readyUtility2();
    }

  };
  local._init();
}());
/* MODULE_END */

